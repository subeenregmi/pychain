We need a system to first request and send blocks on connection.
    - This is pretty easy, as we can just create another TCP request consisting of how many blocks on person has compared
      to another person, and then we can request the blocks required using another tcp request
    - The tcp request needs a parameter of block range to see how much blocks its missing, these blocks should also be
      validated and also the chain has to be validated.
    - We also need a system to propagate transactions and blocks once they are received to all peers, if the same transaction
      has been sent twice disregard the second or future same transactions.
    - We also need a system to validate the block has the correct difficulty based on the difficulty function, this
      should be something that is run after a block is received.
     /// Blocks received should also run validateChain()

We need a system so that the longest blockchain is always worked on.
    - Blocks mined should be distributed straight after mining, then all miners after verification should stop mining
      the current block and then validate the block and the chain after implementing the block. if the block or the chain
      is invalid then we can dump those blocks and then continue mining the previous block.
    - If two blocks are sent at the same time, we should hold both the blocks in a stack, and then wait for the next block
      depending on the next block's previous block id, we should adopt that one.
    - Miners should also then adopt the other persons block id and change their blockchain respectively.
    - This in theory should allow multiple peers to mine at the same time, competing to mine a block fairly.

To-DO
---------
    - System to send and request blocks - DONE
    - Change the block and blockchain validation system to check after a block is received and to check the difficulty.
    - Protocol that propagates transaction to all peers, and to disregard transactions that have already been received.
    - System where two blocks mined at the same time or at the same height have to be added to the stack and the next
      block's previous id determines which block to accept.
    - Make sure that the system only works for when the two blocks competing are for the top blocks. But also should work
      if blocks are getting totally reconstructed
    - System where it goes on until one miner clearly wins in a certain time gap
    - GUI, that does one main thing that it can automatically create transactions using the txids saved. And has abilities
      to use multiple accounts and multiple chains. Also has to look good.